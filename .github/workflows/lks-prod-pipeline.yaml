name: prod pipeline

on:
  push:
    branches:
    -  prod

jobs:
  build:
    name: Build Image Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      -  name: Checkout Repo
         uses: actions/checkout@v3

      -  name: Setup AWS Credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build And Push Image Production Into ECR
        env: 
            ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
            ECR_REPO: lks-voting-image
            VOTE_IMAGE_TAG: vote-prod-latest
            RESULT_IMAGE_TAG: result-prod-latest
            WORKER_IMAGE_TAG: worker-prod-latest
        run: |
            docker build -t lks-voting-image ./vote
            docker tag lks-voting-image $ECR_REGISTRY/$ECR_REPO:$VOTE_IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO:$VOTE_IMAGE_TAG
            
            docker build -t lks-voting-image ./result
            docker tag lks-voting-image $ECR_REGISTRY/$ECR_REPO:$RESULT_IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO:$RESULT_IMAGE_TAG
            
            docker build -t lks-voting-image ./worker
            docker tag lks-voting-image $ECR_REGISTRY/$ECR_REPO:$WORKER_IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO:$WORKER_IMAGE_TAG

  deploy:
    name: Deploy App To Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      -  name: Checkot Repo
         uses: actions/checkout@v3  

      -  name: Setup AWS Credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition (vote)
        id: render-vote
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: vote/task-definition.json
          container-name: lks-vote-container
          image: ${{steps.login-ecr.outputs.registry}}/lks-voting-image:vote-prod-latest

      - name: Fill in the new image ID in the Amazon ECS task definition (result)
        id: render-result
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: result/task-definition.json
          container-name: lks-result-container
          image: ${{steps.login-ecr.outputs.registry}}/lks-voting-image:result-prod-latest

      - name: Fill in the new image ID in the Amazon ECS task definition (worker)
        id: render-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: worker/task-definition.json
          container-name: lks-worker-container
          image: ${{steps.login-ecr.outputs.registry}}/lks-voting-image:worker-prod-latest

      -  name: Deploy Amazon ECS task definition Vote
         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
         with:
           task-definition: ${{steps.render-vote.outputs.task-definition}}
           service: lks-vote-service
           cluster: lks-voting-cluster
           wait-for-service-stability: true

      -  name: Deploy Amazon ECS task definition Result
         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
         with:
           task-definition: ${{steps.render-result.outputs.task-definition}}
           service: lks-result-service
           cluster: lks-voting-cluster
           wait-for-service-stability: true

      -  name: Deploy Amazon ECS task definition Worker
         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
         with:
           task-definition: ${{steps.render-worker.outputs.task-definition}}
           service: lks-worker-service
           cluster: lks-voting-cluster
           wait-for-service-stability: true
  notif:
    name: Send Notification
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
          
      - name: Publish Message To SNS Subscribers
        env:
          TOPIC_ARN: ${{ secrets.AWS_SNS_ARN }}
        run: |
          aws sns publish --topic-arn $TOPIC_ARN --subject "Hello from <Provinsi>!" --message "New version of The Voting App from <Provinsi> is Released !!"
